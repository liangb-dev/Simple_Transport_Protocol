#!/usr/bin/env python

import socket
import struct
import binascii

"""
function: my_network()
arg: NUID (string)
return: address
"""
def my_network(NUID):
    myID = str(NUID) # cast to string
    address = "10." + myID[2:5] + "." + myID[5:7] + "." + myID[7:9]
    return " ".join(map(lambda x: "0x{:02x}".format(int(x)).replace('0x',''), address.split('.')))


"""
function: my_ethernet()
arg: NUID (string)
return: address
"""
def my_ethernet(NUID):
    myeth = list("020"+str(NUID))
    myeth = ' '.join([i+j for i,j in zip(myeth[::2], myeth[1::2])])
    return myeth
     

"""
function: make_ARP()
arg: none
return: 
"""
def make_ARP(ID):
    
    dst_eth = 'ff ff ff ff ff ff/'
    src_eth = my_ethernet(ID) + "/"
    eth_type = '08 06/'
    hw_type = '00 01/'
    prot_type = '08 00/'
    hw_addr = '06 04/'
    op = '00 01/'
    send_eth = my_ethernet(ID) + "/"
    send_IP = my_network(ID) + "/"
    targ_eth = '00 00 00 00 00 00/' 
    targ_IP = '0a 00 00 01/'
    padding = '00'*16 + "/"

    arp = dst_eth + src_eth + eth_type + hw_type + prot_type + hw_addr + op 
    arp += send_eth + send_IP + targ_eth + targ_IP + padding
    
    return arp.replace(" ","").replace("/","") 




"""
function: arpsend()
args: s, fp
description: ARP sent over TCP to 'login-faculty.ccs.neu.edu' port 5025. 
            ARP encapsulated using length field 
"""
def arpsend(s, fp):
    print "Making ARP packet..."
    pkt = make_ARP('001107800')
    #print pkt
    pkt = binascii.unhexlify(pkt)
    #print len(pkt)
    print "Sending ARP packet..."
    s.send(struct.pack('!H', len(pkt)) + pkt, 0)
    phdr = struct.pack("IIII", 0, 0, len(pkt), len(pkt))
    fp.write(phdr+pkt)
    
    
    
    
"""
function: arprecv()
args: s, fp
description:
"""
def arprecv(s, fp):
    print "Getting ARP response..."
    tmp = s.recv(2,0)
    n = struct.unpack('!H', tmp)[0] # unpack returns a list
    print "ARP response length: " + str(n)
    pkt = ''
    while len(pkt) < n:
        pkt += s.recv(n-len(pkt), 0)
    phdr = struct.pack("IIII", 0, 0, len(pkt), len(pkt))
    fp.write(phdr + pkt)
    
    
    print "ARP response data: " 
    print binascii.hexlify(pkt)
    
    

"""
class: tcp_hdr
len: 20 bytes
"""
class tcp_hdr(object):
    def __init__(self):
        self.src_port = '00 10' #16 bits
        self.dst_port = '00 80'#16 bits
        self.seq = '00 00 00 00' #32 bits
        self.ack = '00 00 00 00' #32 bits
        self.len = '50' #4 bits
        self.reserved = '' #6 bits 
        self.flag = '02' #6 bits #SYN
        self.window = '05 78' #16 bits
        self.checksum = '27 2d' #16 bits
        self.urgent = '00 00' #16 bits
        self.options = '' #0 or 32 bits
        #self.data = "" #'GET / HTTP/1.0\r\n\r\n'

    def get_hdr(self):
        result = (self.src_port + self.dst_port + self.seq + self.ack + \
                 self.len + self.reserved + self.flag + self.window + 
                 self.checksum + self.urgent + self.options)
        return result.replace(' ','')

    def update_flags(self, flag):
        self.flag = flag
    def update_seqnum(self, num):
        self.seq_num = num
    def update_acknum(self, num):
        self.ack_num = num
    def update_checksum(self):
        self.checksum = str(ip_cksum(self.get_hdr()))

"""
class: ip_hdr
len: 20 bytes
"""
class ip_hdr(object):
    def __init__(self): 
        self.version = '45' #4 bits
        self.ihl = '' #4 bits
        self.tos = '00' #8 bits
        self.len = '00 28' #16 bits
        self.id = '00 01'#16 bits
        self.flags = '00' #3 bits
        self.offset = '00' #13 bits
        self.ttl = '40' #8 bits
        self.protocol = '06' #8 bits
        self.checksum = '6c 9b' #16 bits
        self.src_addr = my_network('001107800') #32 bits
        self.dst_addr = '0a 00 00 01' #32 bits

    def get_hdr(self):
        result = self.version + self.ihl + self.tos + self.len + self.id + \
        self.flags + self.offset + self.ttl + self.protocol + self.checksum + self.src_addr + self.dst_addr    
        return result.replace(' ','')
    
    def update_checksum(self): 
        self.checksum = str(ip_cksum(self.get_hdr()))


"""
class: eth_hdr
len: 14 bytes
"""
class eth_hdr(object):
    def __init__(self):
        self.preamble = '' #8 bits
        self.dst = '02 00 00 00 00 01' #6 bits
        self.src = '02 00 01 10 78 00' #6 bits
        self.type = '08 00' #2 bits
    def get_hdr(self):
        result = self.preamble + self.dst + self.src + self.type
        return result.replace(' ','')

"""
Internet checksum
use1: ip=checksum(ipheader)
use2: tcp=checksum(pseudoheader + tcpheader) + tcpdata?
"""
def ip_cksum(pkt):
    if len(pkt) & 1:
        pkt += '\0'
    sum = 0
    for i in range(0, len(pkt)-1, 2):
        sum += struct.unpack_from("!H", pkt, offset=i)[0]
    while (sum > 0xffff):
        sum = (sum & 0xffff) + (sum >> 16)
    return sum ^ 0xffff





"""
function: main()

"""
def main():
    # File pointer for wireshark -> 'log.pcap'
    fp = open("log.pcap", "w")
    fhdr = struct.pack("IHHIIII", 0xa1b2c3d4, 2, 4, 0, 0, 65536, 1)
    fp.write(fhdr)

    # TCP socket connection
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(('login-faculty.ccs.neu.edu', 5025))    
    #print my_ethernet('001107800')
    #print my_network('001107800')
    arpsend(s, fp)
    arprecv(s, fp)

    print ""
    print ""
   
    eth_hdr0 = eth_hdr()
    ip_hdr0 = ip_hdr()
    tcp_hdr0 = tcp_hdr()
    print ip_hdr0.src_addr
    print len(binascii.unhexlify(eth_hdr0.get_hdr()))
    print len(binascii.unhexlify(ip_hdr0.get_hdr()))
    print len(binascii.unhexlify(tcp_hdr0.get_hdr()))
    raw_pkt = eth_hdr0.get_hdr() + ip_hdr0.get_hdr() + tcp_hdr0.get_hdr()
    #print raw_pkt
    #print str(ip_hdr0.checksum)
    #print str(tcp_hdr0.checksum)
    raw_pkt = raw_pkt.replace(' ','')
    pkt = binascii.unhexlify(raw_pkt)
    pkt_len = struct.pack("!H",len(pkt))    
    print len(pkt_len)
    print len(pkt)
    print "sending GET..."
"""
thing = "000000000000000000000000000000284500002800010000400610d50aaa55500a000001bb9300502d7bd6060000000050020578810a0000"
    thing2 = binascii.unhexlify(thing)
    thing_len = len(thing2)
    print thing
    print raw_pkt
    s.send(struct.pack("!H", thing_len) + thing2, 0)
"""    
    s.send(pkt_len + pkt, 0)
    print "receiving..."
    
    while True:
        resp = s.recv(56)
        if resp == "": break
        print binascii.hexlify(resp)
        print len(resp)
    s.close()
    print "\done"
    
    # Raw TCP socket connection
        #TODO: Create TCP connection with SOCK.RAW, SOCK.IPROTO_RAW
        #TODO: Create IP packet by wrapping a TCP packet
        #TODO: Create functions to increment values in IP packet
        
        # TODO:
        # 1. while-loop until receive the FIN flag
        # 2. ACK the FIN flag
        # 3. wait for final ACK
        # 4. exit()
    


if __name__ == "__main__":
        main()
