#!/usr/bin/env python

import socket
import struct
import binascii

"""
function: my_network()
arg: NUID (string)
return: address
"""
def my_network(NUID):
    myID = str(NUID) # cast to string
    address = "10." + myID[2:5] + "." + myID[5:7] + "." + myID[7:9]
    return " ".join(map(lambda x: "0x{:02x}".format(int(x)).replace('0x',''), address.split('.')))


"""
function: my_ethernet()
arg: NUID (string)
return: address
"""
def my_ethernet(NUID):
    myeth = list("020"+str(NUID))
    myeth = ' '.join([i+j for i,j in zip(myeth[::2], myeth[1::2])])
    return myeth
     

"""
function: make_ARP()
arg: none
return: 
"""
def make_ARP():
    ID = '001107800' 
    
    dst_eth = 'ff ff ff ff ff ff/'
    src_eth = my_ethernet(ID) + "/"
    eth_type = '08 06/'
    hw_type = '00 01 08 00/'
    hw_addr = '06 04/'
    op = '00 01/'
    send_eth = my_ethernet(ID) + "/"
    send_IP = my_network(ID) + "/"
    targ_eth = '00 00 00 00 00 00/' 
    targ_IP = '0a 00 00 01/'
    padding = '00'*16 + "/"

    arp = dst_eth + src_eth + eth_type + hw_type + hw_addr + op 
    arp += send_eth + send_IP + targ_eth + targ_IP + padding
    
    return arp.replace(" ","").replace("/","") 




"""
function: arpsend()
args: s, fp
description: ARP sent over TCP to 'login-faculty.ccs.neu.edu' port 5025. 
            ARP encapsulated using length field 
"""
def arpsend(s, fp):
    print "Making ARP packet..."
    pkt = make_ARP() #'\1' * 60 # sample packet with bogus addresses and ethertype
    print pkt
    pkt = binascii.unhexlify(pkt)
    print len(pkt)
    print "Sending ARP packet..."
    s.send(struct.pack('!H', len(pkt)) + pkt, 0)
    phdr = struct.pack("IIII", 0, 0, len(pkt), len(pkt))
    fp.write(phdr+pkt)
    
    
    
    
"""
function: arprecv()
args: s, fp
description:
"""
def arprecv(s, fp):
    print "Getting ARP response..."
    tmp = s.recv(2,0)
    n = struct.unpack('!H', tmp)[0] # unpack returns a list
    print "ARP response length: " + str(n)
    pkt = ''
    while len(pkt) < n:
        pkt += s.recv(n-len(pkt), 0)
    phdr = struct.pack("IIII", 0, 0, len(pkt), len(pkt))
    fp.write(phdr + pkt)
    
    
    print "ARP response data: " 
    print binascii.hexlify(pkt)
    


    
"""
function: make_pkt()
arg:
return:
"""
def make_pkt():
    data = 'GET / HTTP/1.0\r\n\r\n'
    src_port = '10' # arbitrary?
    dst_port = '80'
    src_IP = '' # "as above?"
    dst_IP = '' # "as above?"
    #"ethernet addresses as above"?
    flags = 'SYN'
    window = '1400'
    seq_num = 1
    ack_num = 0
    pkt_id = 2

#TODO: finish setting up the packet


"""
class: ip_pkt
"""
class tcp_pkt:
    def __init__(self):
        self.src_port = '10'
        self.dst_port = '80'
        self.src_IP = ''
        self.dst_IP = ''
        self.flags = 'SYN'
        self.window = '1400'
        self.seq_num = 1
        self.ack_num = 0
        self.pkt_id = 2
        self.checksum = ""#TODO:
        self.data = "" #'GET / HTTP/1.0\r\n\r\n'

class ip_pkt:
    def __init__(self):
        #TODO: IP headers 
        self.data = tcp_pkt() #TODO:
        


"""
Internet checksum
"""
def ip_cksum(pkt):
    if len(pkt) & 1:
        pkt += '\0'
    sum = 0
    for i in range(0, len(pkt)-1, 2):
        sum += struct.unpack_from("!H", pkt, offset=i)[0]
    while (sum > 0xffff):
        sum = (sum & 0xffff) + (sum >> 16)
    return sum ^ 0xffff





"""
function: main()

"""
def main():
    # File pointer for wireshark -> 'log.pcap'
    fp = open("log.pcap", "w")
    fhdr = struct.pack("IHHIIII", 0xa1b2c3d4, 2, 4, 0, 0, 65536, 1)
    fp.write(fhdr)

    # TCP socket connection
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(('login-faculty.ccs.neu.edu', 5025))    
    #print my_ethernet('001107800')
    #print my_network('001107800')
    arpsend(s, fp)
    arprecv(s, fp)
    s.close()

    
    # Raw TCP socket connection
        #TODO: Create TCP connection with SOCK.RAW, SOCK.IPROTO_RAW
        #TODO: Create IP packet by wrapping a TCP packet
        #TODO: Create functions to increment values in IP packet


        
        # TODO:
        # 1. while-loop until receive the FIN flag
        # 2. ACK the FIN flag
        # 3. wait for final ACK
        # 4. exit()
    


if __name__ == "__main__":
        main()
