#!/usr/bin/env python

import socket
import struct
import binascii

"""
function: my_network()
arg: NUID (string)
return: address
"""
def my_network(NUID):
    myID = str(NUID) # cast to string
    address = "10." + myID[2:5] + "." + myID[5:7] + "." + myID[7:9]
    return " ".join(map(lambda x: "0x{:02x}".format(int(x)).replace('0x',''), address.split('.')))


"""
function: my_ethernet()
arg: NUID (string)
return: address
"""
def my_ethernet(NUID):
    myeth = list("020"+str(NUID))
    myeth = ' '.join([i+j for i,j in zip(myeth[::2], myeth[1::2])])
    return myeth
     

"""
function: make_ARP()
arg: none
return: 
"""
def make_ARP(ID):
    
    dst_eth = 'ff ff ff ff ff ff/'
    src_eth = my_ethernet(ID) + "/"
    eth_type = '08 06/'
    hw_type = '00 01/'
    prot_type = '08 00/'
    hw_addr = '06 04/'
    op = '00 01/'
    send_eth = my_ethernet(ID) + "/"
    send_IP = my_network(ID) + "/"
    targ_eth = '00 00 00 00 00 00/' 
    targ_IP = '0a 00 00 01/'
    padding = '00'*16 + "/"

    arp = dst_eth + src_eth + eth_type + hw_type + prot_type + hw_addr + op 
    arp += send_eth + send_IP + targ_eth + targ_IP + padding
    
    return arp.replace(" ","").replace("/","") 




"""
function: arpsend()
args: s, fp
description: ARP sent over TCP to 'login-faculty.ccs.neu.edu' port 5025. 
            ARP encapsulated using length field 
"""
def arpsend(s, fp):
    print "Making ARP packet..."
    pkt = make_ARP('001107800')
    #print pkt
    pkt = binascii.unhexlify(pkt)
    #print len(pkt)
    print "Sending ARP packet..."
    s.send(struct.pack('!H', len(pkt)) + pkt, 0)
    phdr = struct.pack("IIII", 0, 0, len(pkt), len(pkt))
    fp.write(phdr+pkt)
    
    
    
    
"""
function: arprecv()
args: s, fp
description:
"""
def arprecv(s, fp):
    print "Getting ARP response..."
    tmp = s.recv(2,0)
    n = struct.unpack('!H', tmp)[0] # unpack returns a list
    print "ARP response length: " + str(n)
    pkt = ''
    while len(pkt) < n:
        pkt += s.recv(n-len(pkt), 0)
    phdr = struct.pack("IIII", 0, 0, len(pkt), len(pkt))
    fp.write(phdr + pkt)
     
    print "ARP response data: " 
    print binascii.hexlify(pkt)
    
    

"""
class: tcp_hdr
len: 20 bytes
"""
class tcp_hdr(object):
    def __init__(self):
        self.src_port = 'bb 93' #16 bits   #Randomize?
        self.dst_port = '00 50'#16 bits
        self.seq = '00 00 00 00' #32 bits  #Randomize?
        self.ack = '00 00 00 00' #32 bits
        self.len = '50' #4 bits
        self.reserved = '' #6 bits 
        self.flag = '02' #6 bits #SYN
        self.window = '05 78' #16 bits
        self.checksum = '00 00' #16 bits
        self.urgent = '00 00' #16 bits
        self.options = '' #0 or 32 bits
        self.data = "" #'GET / HTTP/1.0\r\n\r\n'

    def get_hdr(self):
        result = (self.src_port + self.dst_port + self.seq + self.ack + \
                 self.len + self.reserved + self.flag + self.window + 
                 self.checksum + self.urgent + self.options + self.data)
        return result.replace(' ','')

    def update_flags(self, flag):
        self.flag = flag
    def update_seqnum(self, num):
        self.seq = num
    def update_acknum(self, num):
        self.ack = num
    def update_checksum(self, string):
        self.checksum = ip_cksum(string)
    def set_GET(self):
        self.data = 'GET / HTTP/1.0\r\n\r\n'
    def reset_checksum(self):
        self.checksum = '00 00'


#H H I I B B H H H
#12345, 80, 0, 0, 0x50, 2, 1800
#B B H H H B B H I I
# 0x45, 0, 20 + eln, 1, 0, 40, 6, 0, srcaddr, dstaddr



"""
class: pseduo header
"""
class p_hdr(object):
    def __init__(self):
        self.src = my_network('001107800')
        self.dst = '0a 00 00 01'
        self.type = '00 06'
        self.len = '00 14'
    def get_hdr(self):
        result = self.src + self.dst + self.type + self.len
        return result.replace(' ','')
    def update_len(self, string1):
        self.len = string1 


"""
class: ip_hdr
len: 20 bytes
"""
class ip_hdr(object):
    def __init__(self): 
        self.version = '45' #4 bits
        self.ihl = '' #4 bits
        self.tos = '00' #8 bits
        self.len = '00 28' #16 bits
        self.id = '00 01'#16 bits
        self.flags = '00' #3 bits
        self.offset = '00' #13 bits
        self.ttl = '40' #8 bits
        self.protocol = '06' #8 bits
        self.checksum = '00 00' #16 bits
        self.src_addr = my_network('001107800') #32 bits
        self.dst_addr = '0a 00 00 01' #32 bits

    def get_hdr(self):
        result = self.version + self.ihl + self.tos + self.len + self.id + \
        self.flags + self.offset + self.ttl + self.protocol + self.checksum + self.src_addr + self.dst_addr    
        return result.replace(' ','')
    def update_checksum(self, string):
        self.checksum = ip_cksum(string)
    def update_len(self, string):
        self.len = string
    def reset_checksum(self):
        self.checksum = '00 00'
    

"""
class: eth_hdr
len: 14 bytes
"""
class eth_hdr(object):
    def __init__(self):
        self.preamble = '' #8 bits
        self.dst = '02 00 00 00 00 01' #6 bits
        self.src = '02 00 01 10 78 00' #6 bits
        self.type = '08 00' #2 bits
    def get_hdr(self):
        result = self.preamble + self.dst + self.src + self.type
        return result.replace(' ','')

"""
Internet checksum
use1: ip=checksum(ipheader)
use2: tcp=checksum(pseudoheader + tcpheader) + tcpdata?
"""
def ip_cksum(pkt):
    if len(pkt) & 1:
        pkt += '\0'
    sum = 0
    for i in range(0, len(pkt)-1, 2):
        sum += struct.unpack_from("!H", pkt, offset=i)[0]
    while (sum > 0xffff):
        sum = (sum & 0xffff) + (sum >> 16)
    result = sum ^ 0xffff
    return str(hex(result)).replace('0x','')




def expand_pkt(s):
    print "Ethernet: "
    print "  dst addr: " + str(s[0:12])
    print "  src addr: " + str(s[12:24])
    print "  type: " + str(s[24:28])
    print "IP: "
    print "  version, tos: " + str(s[28:32])
    print "  len: " + str(s[32:36])
    print "  id: " + str(s[36:40])
    print "  flags, offset: " + str(s[40:44])
    print "  ttl: " + str(s[44:46])
    print "  protocol: " + str(s[46:48])
    print "  checksum: " + str(s[48:52])
    print "  src: " + str(s[52:60])
    print "  dst: " + str(s[60:68])
    print "TCP: "
    print "  src port: " + str(s[68:72])
    print "  dst port: " + str(s[72:76])
    print "  seq num: " + str(s[76:84])
    print "  ack num: " + str(s[84:92])
    print "  hdr len: " + str(s[92:94])
    print "  flags: " + str(s[94:96])
    print "  window: " + str(s[96:100])
    print "  checksum: " + str(s[100:104])
    print "  urgent: " + str(s[104:108])
    print "  rest: " + str(len(s[108:]))


"""
function: main()

"""
def main():
    """
    ARP section
    """
    # File pointer for wireshark -> 'log.pcap'
    fp = open("log.pcap", "w")
    fhdr = struct.pack("IHHIIII", 0xa1b2c3d4, 2, 4, 0, 0, 65536, 1)
    fp.write(fhdr)

    # TCP socket connection
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(('login-faculty.ccs.neu.edu', 5025))    
    #print my_ethernet('001107800')
    #print my_network('001107800')
    arpsend(s, fp)
    arprecv(s, fp)

    print ""
    print ""
 

    """
    SYN send section --------------------------------
    """
    # Construct headers  
    eth_hdr0 = eth_hdr()
    ip_hdr0 = ip_hdr()
    tcp_hdr0 = tcp_hdr()
    p_hdr0 = p_hdr()

    # update checksums
    arg1 = binascii.unhexlify(p_hdr0.get_hdr() + tcp_hdr0.get_hdr())
    tcp_hdr0.update_checksum(arg1)
    arg2 = binascii.unhexlify(ip_hdr0.get_hdr())
    ip_hdr0.update_checksum(arg2)

    # Concatenate headers
    raw_pkt = eth_hdr0.get_hdr() + ip_hdr0.get_hdr() + tcp_hdr0.get_hdr() 
    print raw_pkt 
    # Format headers & Get length
    pkt = binascii.unhexlify(raw_pkt)
    pkt_len = struct.pack("!H",len(pkt))    

    print "sending SYN..."
     
    s.send(pkt_len + pkt, 0)

    """
    SYN/ACK receive section ----------------------------
    """
    # Receive packet
    print "receiving SYN/ACK..."    
    pkt = ''
    tmp = s.recv(2,0)
    n = struct.unpack('!H', tmp)[0]
    while len(pkt) < n:
        pkt += s.recv(n - len(pkt), 0)
    resp = pkt

    print binascii.hexlify(resp)
    print len(resp)

    (remote_seq, rcvd_ack, flags) = struct.unpack("!xxxxIIxBxxxxxx", resp[34:54])
    #print hex(remote_seq)
    #print hex(rcvd_ack)
    #print hex(flags)
 

    """
    ACK send section ---------------------------------------
    """
    print "sending ACK..."
    # update tcp seq_num
    tcp_hdr0.update_seqnum('00 00 00 01')
    # update tcp ack     
    tcp_hdr0.update_acknum(str(hex(remote_seq + 1)).replace('0x','')) #seq+1
    print str(hex(remote_seq + 1)).replace('0x','')
    # update tcp flags
    tcp_hdr0.update_flags('10') #'10' for ACK
    # reset checksum
    tcp_hdr0.reset_checksum()
    # update tcp checksum
    arg1 = binascii.unhexlify(p_hdr0.get_hdr() + tcp_hdr0.get_hdr())
    tcp_hdr0.update_checksum(arg1)
    print tcp_hdr0.checksum
    raw_pkt = eth_hdr0.get_hdr() + ip_hdr0.get_hdr() + tcp_hdr0.get_hdr() 
    pkt = binascii.unhexlify(raw_pkt)
    pkt_len = struct.pack("!H", len(pkt))
    print "sending ACK..."
    s.send(pkt_len + pkt, 0)



    """
    GET send section -----------------------------------------
    """

    data = 'GET / HTTP/1.0\r\n\r\n'


    # update pseudo header length
    p_hdr0.update_len('00 26') #38
    # reset checksum
    tcp_hdr0.reset_checksum()    
    # update tcp checksum
    arg1 = binascii.unhexlify(p_hdr0.get_hdr() + tcp_hdr0.get_hdr())
    arg1 += data 
    tcp_hdr0.update_checksum(arg1)
    
    # update ip length
    ip_hdr0.update_len('00 3a')#58
    # reset checksum
    ip_hdr0.reset_checksum()
    
    # update ip checksum
    arg1 = binascii.unhexlify(ip_hdr0.get_hdr())
    ip_hdr0.update_checksum(arg1)
    
 

    raw_pkt = eth_hdr0.get_hdr() + ip_hdr0.get_hdr() + tcp_hdr0.get_hdr()
    
    pkt = binascii.unhexlify(raw_pkt)
    pkt_len = struct.pack("!H", len(pkt)+len(data))
    print "sending GET..."
    s.send(pkt_len + pkt + data, 0)
    
    """
    ACK receive section --------------------------------------
    """
    print "receiving ACK..."
    pkt = ''
    tmp = s.recv(2,0)
    n = struct.unpack("!H", tmp)[0]
    while len(pkt) < n:
        pkt += s.recv(n - len(pkt),0)
    print binascii.hexlify(pkt)
    print len(pkt)
   
    #expand_pkt(binascii.hexlify(pkt))
 
    """
    (remote_seq, rcvd_ack, flags) = struct.unpack("!xxxxIIxBxxxxxx", pkt[34:54])
    print hex(remote_seq)
    print hex(rcvd_ack)
    print hex(flags)
    """

    """
    HTTP/OK section ------------------------------------------

    """
    print "receiving HTTP/OK data..."
    pkt = ''
    tmp = s.recv(2,0)
    n = struct.unpack("!H", tmp)[0]
    print n
    while len(pkt) < n:
        pkt += s.recv(n - len(pkt), 0)
    print binascii.hexlify(pkt)
    print len(pkt)    

    #expand_pkt(binascii.hexlify(pkt))


    """
    send ACK section ---------------------------------------
    """ 
    print "sending ACK..."
    (remote_seq, rcvd_ack, flags) = struct.unpack("!xxxxIIxBxxxxxx",pkt[34:54])

    p_hdr1 = p_hdr()
    ip_hdr1 = ip_hdr()
    tcp_hdr1 = tcp_hdr()
    eth_hdr1 = eth_hdr()
    
    #expand_pkt(eth_hdr1.get_hdr() + ip_hdr1.get_hdr() + tcp_hdr1.get_hdr())

    ip_hdr1.update_len('00 28')
    p_hdr1.update_len('00 14')
    
    tcp_hdr1.update_seqnum('00 00 00 13')
    
    
    tcp_hdr1.update_acknum('00 00 01 a7')
    tcp_hdr1.update_flags('10')
    tcp_hdr1.reset_checksum()

    arg1 = binascii.unhexlify(p_hdr1.get_hdr() + tcp_hdr1.get_hdr())
    tcp_hdr1.update_checksum(arg1)
    #print tcp_hdr0.checksum
    raw_pkt = eth_hdr1.get_hdr() + ip_hdr1.get_hdr() + tcp_hdr1.get_hdr()

    expand_pkt(raw_pkt)

    pkt = binascii.unhexlify(raw_pkt)
    pkt_len = struct.pack("!H", len(pkt))    
    s.send(pkt_len + pkt, 0)



    """
    FIN/ACK receive section ---------------------------------
    """
    print "receiving FIN/ACK..."
    pkt = ''
    tmp = s.recv(2,0)
    n = struct.unpack("!H", tmp)[0]
    while len(pkt) < n:
        pkt += s.recv(n - len(pkt), 0)
    print binascii.hexlify(pkt)
    print len(pkt)

    expand_pkt(binascii.hexlify(pkt))

    """
    send ACK section ------------------------------------
    """
    print "sending ACK..."
    (remote_seq, rcvd_ack, flags) = struct.unpack("!xxxxIIxBxxxxxx", pkt[34:54])
    
    eth_hdr2 = eth_hdr()
    ip_hdr2 = ip_hdr()
    tcp_hdr2 = tcp_hdr()
    p_hdr2 = p_hdr()

    tcp_hdr2.update_seqnum('00 00 00 14')
    tcp_hdr2.update_acknum(str(hex(remote_seq + 1)).replace('0x',''))
    tcp_hdr2.update_flags('10')
    tcp_hdr2.reset_checksum()
    
    arg1 = binascii.unhexlify(p_hdr2.get_hdr() + tcp_hdr2.get_hdr())
    tcp_hdr2.update_checksum(arg1)
    raw_pkt = eth_hdr2.get_hdr() + ip_hdr2.get_hdr() + tcp_hdr2.get_hdr()
 
    expand_pkt(binascii.hexlify(raw_pkt))

    pkt = binascii.unhexlify(raw_pkt)
    pkt_len = struct.pack("!H",len(pkt))
    s.send(pkt_len + pkt, 0)

    s.close()
    print "\done"


if __name__ == "__main__":
        main()
